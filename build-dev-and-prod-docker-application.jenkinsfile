#!groovy
pipeline {
    agent {
        node {
            label 'build-server'
        }
    }
    stages {
        stage('Start'){
            steps{
                dir('files'){
                    echo sh(returnStdout: true, script: 'env|sort')
                    println 'Ensuring workspace is empty'
                    deleteDir()
                }
            }
        }
        stage('Clone repository from GitHub'){
            steps{
                dir('files') {
                    println 'Cloning GitHub repository'
                    pwsh 'git clone $env:GithubRepo -b $env:GithubBranch'
                }
            }
        }
        stage('Check blue/green deployment status on dev-server'){
            agent{
                label 'dev-server'
            }
            steps{
                script {
                    env.DevDockerContainerTagBlueGreen = pwsh(returnStdout: true, script: '''
                        if (Test-Path $env:BlueNginxConfigLocation) {
                            Write-Host "Blue is live, building green container"
                            Write-Output "$env:DevDockerContainerTag-green"
                        } elseif (Test-Path $env:GreenNginxConfigLocation) {
                            Write-Host "Green is live, building blue container"
                            Write-Output "$env:DevDockerContainerTag-blue"
                        } else {
                            Write-Host "No blue/green config detected, building generic container"
                            Write-Output $env:DevDockerContainerTag
                        }
                    ''').trim()
                    println "env.DevDockerContainerTagBlueGreen:"
                    println env.DevDockerContainerTagBlueGreen
                }
            }
        }
        stage('Build dev and prod dockerfiles'){
            steps{
                dir('files' + ProjectDirectory){
                    println 'Building dockerfile'
                    pwsh '''
                        sudo docker build -f $env:DevDockerfileLocation -t $env:DevDockerContainerTagBlueGreen .
                        if ($env:NewRelicLicenseKey.length -ne 0) {
                            sudo docker build -f $env:ProdDockerfileLocation --build-arg new_relic_license_key=$env:NewRelicLicenseKey -t $env:ProdDockerContainerTag .
                        } else {
                            sudo docker build -f $env:ProdDockerfileLocation -t $env:ProdDockerContainerTag .
                        }
                    '''
                }
            }
        }
        stage ('Push dev and prod docker containers'){
            steps{
                dir('files'){
                    println 'Pushing docker container'
                    pwsh '''
                        sudo docker push $env:DevDockerContainerTagBlueGreen
                        sudo docker push $env:ProdDockerContainerTag
                    '''
                }
            }
        }
        stage('Clean up'){
            steps{
                dir('files'){
                    println 'Removing cloned GitHub repository'
                    deleteDir()
                }
            }
        }
    }
}