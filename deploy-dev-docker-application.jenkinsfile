#!groovy
pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    stages {
        stage('Start'){
            steps{
                dir('files'){
                    echo sh(returnStdout: true, script: 'env|sort')
                    println 'Ensuring workspace is empty'
                    deleteDir()
                }
            }
        }
        stage('Check which container is latest'){
            steps{
                script {
                    env.LatestDockerContainerTag = pwsh(returnStdout: true, script: '''
                        $dockerContainerTagsJson = (Invoke-WebRequest -URI $env:DockerHubRepositoryUrl).Content | ConvertFrom-Json
                        $latestPush = "01/01/1970 00:00:00"
                        $latestTag = "latest"
                        foreach ($tag in $dockerContainerTagsJson.results) {
                            if ($env:DockerContainerTags.Contains($tag.name)) {
                                if ((get-date $latestPush) -lt (get-date $tag.tag_last_pushed)) {
                                    $latestTag = $tag.name
                                    $latestPush = $tag.tag_last_pushed
                                }
                            }
                        }
                        Write-Output $latestTag
                    ''').trim()

                    println 'env.LatestDockerContainerTag:'
                    println env.LatestDockerContainerTag
                }
            }
        }
        stage('Deploy new dev docker container'){
            steps{
                script {
                    println 'Deploying new dev docker container'
                    pwsh '''
                        if ($env:LatestDockerContainerTag -Match "-green"){
                            Write-Host "Deploying -green docker container"
                            sudo docker-compose -f $env:GreenDockerComposeLocation up -d
                        } elseif ($env:LatestDockerContainerTag -Match "-blue") {
                            Write-Host "Deploying -blue docker container"
                            sudo docker-compose -f $env:BlueDockerComposeLocation up -d
                        } else {
                            Write-Host "Deploying generic latest docker container"
                            sudo docker-compose -f $env:GenericDockerComposeLocation up -d
                        }
                    '''
                    println 'Waiting for positive healthcheck result'
                    def appHealthy = pwsh(returnStatus: true, script: '''
                        exit 1
                    ''')
                    if (appHealthy != 0) {
                        error('Docker container failed to start')
                    } else {
                        println 'Docker container started OK'
                    }
                }
            }
        }
        stage ('Update NGINX config'){
            steps{
                dir('files'){
                    println 'Updating NGINX config'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage ('Stop unused docker container'){
            steps{
                dir('files'){
                    println 'Stopping unused dev docker container'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage('Clean up'){
            steps{
                dir('files'){
                    println 'Removing cloned GitHub repository'
                    deleteDir()
                }
            }
        }
    }
}