#!groovy
pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    stages {
        stage('Start'){
            steps{
                dir('files'){
                    echo sh(returnStdout: true, script: 'env|sort')
                    println 'Ensuring workspace is empty'
                    deleteDir()
                }
            }
        }
        stage('Check which container is latest'){
            steps{
                script {
                    env.LatestDockerContainerTag = pwsh(returnStdout: true, script: '''
                        $dockerContainerTagsJson = (Invoke-WebRequest -URI $env:DockerHubRepositoryUrl).Content | ConvertFrom-Json
                        $latestPush = "01/01/1970 00:00:00"
                        $latestTag = "latest"
                        foreach ($tag in $dockerContainerTagsJson.results) {
                            if ($env:DockerContainerTags.Contains($tag.name)) {
                                if ((get-date $latestPush) -lt (get-date $tag.tag_last_pushed)) {
                                    $latestTag = $tag.name
                                    $latestPush = $tag.tag_last_pushed
                                }
                            }
                        }
                        Write-Output $latestTag
                    ''').trim()

                    println 'env.LatestDockerContainerTag:'
                    println env.LatestDockerContainerTag
                }
            }
        }
        stage('Deploy new dev docker container'){
            steps{
                script {
                    println 'Deploying new dev docker container'
                    def appDeployed = pwsh(returnStatus: true, script: '''
                        function Get-AppHealth {
                            param (
                                [Parameter(Mandatory=$true)] [string] $appHealthcheckUri,
                                [Parameter(Mandatory=$false)] [int] $retryCount = 0
                            )
                            Write-Host "Checking app health"
                            if ($retryCount -lt 15) {
                                try {
                                    $healthcheckResponse = (Invoke-WebRequest -Uri $appHealthcheckUri).Content
                                    if ($healthcheckResponse.Contains("Healthy")) {
                                        Write-Host "app healthy"
                                        exit 0  
                                    } else {
                                        Write-Host "app NOT healthy"
                                        exit 1
                                    }
                                } catch {
                                    $delay = 5 * $retryCount
                                    Write-Host "No response, waiting $delay seconds and retrying"
                                    Start-Sleep -Seconds $delay
                                    Get-AppHealth -appHealthcheckUri $appHealthcheckUri -retryCount ($retryCount + 1)
                                }
                            } else {
                                exit 1
                            }
                        }

                        if ($env:LatestDockerContainerTag -Match "-green"){
                            Write-Host "Deploying -green docker container"
                            sudo docker-compose -f $env:GreenDockerComposeLocation pull
                            sudo docker-compose -f $env:GreenDockerComposeLocation up -d
                            Get-AppHealth -appHealthcheckUri $env:GreenAppHealthcheckUri -retryCount 0
                        } elseif ($env:LatestDockerContainerTag -Match "-blue") {
                            Write-Host "Deploying -blue docker container"
                            sudo docker-compose -f $env:BlueDockerComposeLocation pull
                            sudo docker-compose -f $env:BlueDockerComposeLocation up -d
                            Get-AppHealth -appHealthcheckUri $env:BlueAppHealthcheckUri -retryCount 0
                        } else {
                            Write-Host "Deploying generic latest docker container"
                            sudo docker-compose -f $env:DockerComposeLocation pull
                            sudo docker-compose -f $env:DockerComposeLocation up -d
                            Get-AppHealth -appHealthcheckUri $env:AppHealthcheckUri -retryCount 0
                        }
                    ''')

                    if (appDeployed != 0) {
                        error('Docker container failed to start')
                    } else {
                        println 'Docker container started OK'
                    }
                }
            }
        }
        stage ('Update NGINX config'){
            steps{
                script {
                    println 'Updating NGINX config'
                    def nginxConfigUpdated = pwsh(returnStatus: true, script: '''

                        if ($env:LatestDockerContainerTag -Match "-green"){
                            if (Test-Path "$($env:BlueNginxConfigLocation).conf") {
                                Write-Host "Blue is currently live, changing config to put green live"
                                sudo mv "$env:GreenNginxConfigLocation" "$($env:GreenNginxConfigLocation).conf"
                                sudo mv "$($env:BlueNginxConfigLocation).conf" "$env:BlueNginxConfigLocation"
                                Write-Host "Reloading NGINX config"
                                docker exec -i nginx nginx -s reload
                            } else {
                                Write-Host "Green config is already live, exiting"
                                Exit 0
                            }
                        } elseif ($env:LatestDockerContainerTag -Match "-blue") {
                            if (Test-Path "$($env:GreenNginxConfigLocation).conf") {
                                Write-Host "Green is currently live, changing config to put blue live"
                                sudo mv "$env:BlueNginxConfigLocation" "$($env:BlueNginxConfigLocation).conf"
                                sudo mv "$($env:GreenNginxConfigLocation).conf" "$env:GreenNginxConfigLocation"
                                Write-Host "Reloading NGINX config"
                                docker exec -i nginx nginx -s reload
                            } else {
                                Write-Host "Blue config is already live, exiting"
                                Exit 0
                            }
                        } else {
                            Write-Host "No blue/green config, exiting"
                            Exit 0
                        }
                    ''')
                    
                    if (nginxConfigUpdated != 0) {
                        error('NGINX config failed to update')
                    } else {
                        println 'NGINX config updated OK'
                    }
                }
            }
        }
        stage ('Stop unused docker container'){
            steps{
                script {
                    println 'Stopping unused dev docker container'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage('Clean up'){
            steps{
                dir('files'){
                    println 'Removing cloned GitHub repository'
                    deleteDir()
                }
            }
        }
    }
}