#!groovy
pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    stages {
        stage('Start'){
            steps{
                dir('files'){
                    echo sh(returnStdout: true, script: 'env|sort')
                    println 'Ensuring workspace is empty'
                    deleteDir()
                }
            }
        }
        stage('Check which container is latest'){
            steps{
                script {
                    env.LatestDockerContainer = pwsh(returnStdout: true, script: '''
                        $dockerContainerTagsJson = (Invoke-WebRequest -URI $env:DockerHubRepositoryUrl).Content | ConvertFrom-Json
                        $latestPush = "01/01/1970 00:00:00"
                        $latestTag = "latest"
                        foreach ($tag in $dockerContainerTagsJson.results) {
                            if ($env:DockerContainerTags.Contains($tag.name)) {
                                if ((get-date $latestPush) -lt (get-date $tag.tag_last_pushed)) {
                                    $latestTag = $tag.name
                                    $latestPush = $tag.tag_last_pushed
                                }
                            }
                        }
                        Write-Output $latestTag
                    ''').trim()

                    println "env.LatestDockerContainer:"
                    println env.LatestDockerContainer

                }
            }
        }
        stage('Deploy new dev docker container'){
            steps{
                dir('files' + ProjectDirectory){
                    println 'Deploying new dev docker container'
                    pwsh '''

                    '''
                }
            }
        }
        stage ('Update NGINX config'){
            steps{
                dir('files'){
                    println 'Updating NGINX config'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage ('Stop unused docker container'){
            steps{
                dir('files'){
                    println 'Stopping unused dev docker container'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage('Clean up'){
            steps{
                dir('files'){
                    println 'Removing cloned GitHub repository'
                    deleteDir()
                }
            }
        }
    }
}