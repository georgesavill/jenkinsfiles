#!groovy
pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    stages {
        stage('Start'){
            steps{
                dir('files'){
                    echo sh(returnStdout: true, script: 'env|sort')
                    println 'Ensuring workspace is empty'
                    deleteDir()
                }
            }
        }
        stage('Check which container is live'){
            steps{
                script {
                    env.LiveDevDockerContainer = pwsh(returnStdout: true, script: '''
                        if (Test-Path $env:BlueNginxConfigLocation) {
                            Write-Host "Blue container is live"
                            Write-Output "blue"
                        } elseif (Test-Path $env:GreenNginxConfigLocation) {
                            Write-Host "Green container is live"
                            Write-Output "green"
                        } else {
                            Write-Host "No blue/green config detected, generic container is live"
                            Write-Output "generic"
                        }
                    ''').trim()
                    println "env.LiveDevDockerContainer:"
                    println env.LiveDevDockerContainer

                }
            }
        }
        stage('Deploy new dev docker container'){
            steps{
                dir('files' + ProjectDirectory){
                    println 'Deploying new dev docker container'
                    pwsh '''

                    '''
                }
            }
        }
        stage ('Update NGINX config'){
            steps{
                dir('files'){
                    println 'Updating NGINX config'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage ('Stop unused docker container'){
            steps{
                dir('files'){
                    println 'Stopping unused dev docker container'
                    pwsh '''
                    
                    '''
                }
            }
        }
        stage('Clean up'){
            steps{
                dir('files'){
                    println 'Removing cloned GitHub repository'
                    deleteDir()
                }
            }
        }
    }
}